apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.bintray"

@SuppressWarnings(["GroovyUnusedDeclaration", "GrMethodMayBeStatic"])
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

@SuppressWarnings("GroovyUnusedDeclaration")
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    android.libraryVariants.all { variant ->
        def javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompiler.source
            ext.androidJar = project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath = files(variant.javaCompiler.classpath.files) + files(ext.androidJar)
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }

        javadocTask.dependsOn variant.javaCompiler

        def jarJavadocTask = task("jar${variant.name.capitalize()}Javadoc", type: Jar) {
            description "Generate Javadoc Jar for $variant.name"
            classifier = 'javadoc'
            from javadocTask.destinationDir
        }

        jarJavadocTask.dependsOn javadocTask
        artifacts.add('archives', jarJavadocTask)

        def jarSourceTask = task("jar${variant.name.capitalize()}Sources", type: Jar) {
            description "Generates Java Sources for $variant.name."
            classifier = 'sources'
            from variant.javaCompiler.source
        }

        jarSourceTask.dependsOn variant.javaCompiler
        artifacts.add('archives', jarSourceTask)
    }
}

bintray {
    dryRun = false
    publish = true
    user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray.apikey') ? project.property('bintray.apikey') : System.getenv('BINTRAY_API_KEY')
    def gpgkey = project.hasProperty('bintray.gpg.key') ? project.property('bintray.gpg.key') : System.getenv('BINTRAY_GPG_KEY')
    def gpgpass = project.hasProperty('bintray.gpg.password') ? project.property('bintray.gpg.password') : System.getenv('BINTRAY_GPG_PASS')

    publications('release')
    configurations = ['archives']
    pkg {
        repo = "maven"
        // it is the name that appears in bintray when logged
        name = POM_ARTIFACT_ID
        websiteUrl = POM_URL
        vcsUrl = POM_SCM_URL
        licenses = ["Apache-2.0"]
        publish = true
        version {
            name = VERSION_NAME

            mavenCentralSync {
                sync = false
                user = getRepositoryUsername() //OSS user token
                password = getRepositoryPassword() //OSS user password
                close = '1'
            }
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = gpgkey //Optional. The passphrase for GPG signing'
            }
        }
    }
}

ext.addDependency = { dependencyNode, group, name, version ->
    dependencyNode.appendNode('groupId', group)
    dependencyNode.appendNode('artifactId', name)
    dependencyNode.appendNode('version', version)
    //dependencyNode.appendNode('type', "aar")
    dependencyNode.appendNode('scope', "compile")
}

publishing {
    publications {
        release(MavenPublication) {
            pom {
                // Add your description here
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_SCM_URL

                // Set your license
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = 'mikepenz@gmail.com'
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies');
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.version != "unspecified") {
                            addDependency(dependencyNode, it.group, it.name, it.version)
                        } else {
                            addDependency(dependencyNode, it.getDependencyProject().findProperty("GROUP"), it.getDependencyProject().findProperty("POM_ARTIFACT_ID"), it.getDependencyProject().findProperty("VERSION_NAME"))
                        }
                    }
                }
            }
        }
    }
}